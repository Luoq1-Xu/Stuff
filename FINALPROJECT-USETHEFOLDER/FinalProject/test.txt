if event.ui_element == randompitch:
                ptch = random.randint(1,7)
                if ptch == 1:
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, 2.3, -0.05, -2, 0.3, 5, 520, 1.3, -0.07, 220)
                elif ptch == 2:
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, 2, -0.01, -1.2, 0.35, 5, 450, 0.35, -0.02, 200)
                elif ptch == 3:
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, 1, 0.2, 0.3, 0.65, 5, 450, 1.0, 0.1, 240)
                elif ptch == 4:
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, 1.5, 0.15, -0.55, 0.8, 5, 495, 1.15, -0.075, 240)
                elif ptch == 5:
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, 0.5, 0.05, 0.3, 0.65, 5, 500, 1.3, -0.4, 250)
                elif ptch == 6:
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, 0.7, 0.05, 0.3, 0.65, 5, 450, 1.8, 0.037, 300)
                elif ptch == 7:
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, -0.5, 0.3, 3, 0.5, 5, 480, 0.75, 1, 300)



            if event.ui_element == fourseamvariable:
                xoffset = random.randint(-2, 3)
                yoffset = random.randint(-1, 1)
                ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                simulateadvanced(True, ball_pos, 1 + xoffset, 0.2, 0.3 + yoffset, 0.65, 4, 425, 1.0, 0.1, 240)


            if event.ui_element == changeupvariable:
                xoffset = random.randint(-1, 3)
                yoffset = random.randint(-1, 1)
                ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                simulateadvanced(True, ball_pos, 1.5 + xoffset, 0.15, -0.55 + yoffset, 0.8, 5, 495, 1.15, -0.075, 240)

            if event.ui_element == slidervariable:
                xoffset = random.randint(-2, 2)
                yoffset = random.randint(-2, 2)
                ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                simulateadvanced(True, ball_pos, -0.5 + xoffset, 0.2, 3 + yoffset, 0.5, 5, 480, 0.75, 1.3, 300)

            if event.ui_element == curveballvariable:
                xoffset = random.randint(-2, 4)
                yoffset = random.randint(-3, 4)
                ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                simulateadvanced(True, ball_pos, 2.3 + xoffset, -0.05, -2 + yoffset, 0.3, 5, 520, 1.4, -0.05, 220)


            if event.ui_element == randomvariable:
                rand = random.randint(1,4)
                if rand == 1:
                    # fastball
                    xoffset = random.uniform(-2, 3)
                    yoffset = random.uniform(-1, 1)
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, 1 + xoffset, 0.2, 0.3 + yoffset, 0.65, 5, 425, 1.0, 0.1, 240)
                elif rand == 2:
                    # changeup
                    xoffset = random.uniform(-4, 4)
                    yoffset = random.uniform(-1, 1)
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, 1.5 + xoffset, 0.15, -0.55 + yoffset, 0.8, 5, 475, 1.15, -0.075, 240)
                elif rand == 3:
                    # slider
                    xoffset = random.uniform(-2, 2)
                    yoffset = random.uniform(-2, 2)
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, -0.5 + xoffset, 0.2, 3 + yoffset, 0.5, 5, 480, 0.75, 1.3, 300)
                elif rand == 4:
                    # curveball
                    xoffset = random.uniform(-2, 4)
                    yoffset = random.uniform(-3, 4)
                    ball_pos = pygame.Vector2((screen.get_width() / 2) - 100, (screen.get_height() / 3) - 30 )
                    simulateadvanced(True, ball_pos, 2.3 + xoffset, -0.05, -2 + yoffset, 0.3, 5, 520, 1.4, -0.05, 220)










                xoffset = random.uniform(-4, 1)
                yoffset = random.uniform(-1, 2)
                ball_pos = pygame.Vector2((screen.get_width() / 2) - 20, (screen.get_height() / 3) + 65 )
                simulateadvancedrighty(True, ball_pos, -3 + xoffset, 0.15, 0.2 + yoffset, 0.5, 4, 460, 0.7, 0.3, 300)











            if event.ui_element == rightylowfastball:
                xoffset = random.uniform(-0.5, 2)
                yoffset = random.uniform(-1, 1)
                ball_pos = pygame.Vector2((screen.get_width() / 2) - 23, (screen.get_height() / 3) + 83 )
                simulateadvancedrighty(True, ball_pos, 3 + xoffset, 0, 6 + yoffset, 0.1, 4, 390, 0.1, -0.25, 150)

            if event.ui_element == rightyslider:
                xoffset = random.uniform(-1, 1)
                yoffset = random.uniform(-1, 1)
                ball_pos = pygame.Vector2((screen.get_width() / 2) - 23, (screen.get_height() / 3) + 83 )
                simulateadvancedrighty(True, ball_pos, 0.3 + xoffset, 0.2, 6 + yoffset, 0.1, 4, 410, 0.6, 0.45, 250)

            if event.ui_element == rightyhighfastball:
                xoffset = random.uniform(-3, 3)
                yoffset = random.uniform(-2, 1)
                ball_pos = pygame.Vector2((screen.get_width() / 2) - 23, (screen.get_height() / 3) + 83 )
                simulateadvancedrighty(True, ball_pos, 0.3 + xoffset, 0, 3 + yoffset, 0, 4, 390, 0, -0.2, 150)

            if event.ui_element == rightychangeup:
                xoffset = random.uniform(-3, 3)
                yoffset = random.uniform(-1, 1)
                ball_pos = pygame.Vector2((screen.get_width() / 2) - 23, (screen.get_height() / 3) + 83 )
                simulateadvancedrighty(True, ball_pos, 1 + xoffset, -0.01, 5 + yoffset, 0.2, 4, 450, 0.5, -0.3, 170)







            if event.ui_element == leftyfastball:
                xoffset = random.uniform(-1, 5)
                yoffset = random.uniform(-3, 3)
                ball_pos = pygame.Vector2((screen.get_width() / 2) + 90, (screen.get_height() / 3) + 70 )
                simulateadvancedlefty(True, ball_pos, -5 + xoffset, -0.2, 0.2 + yoffset, 0.50, 4, 400, 0.65, -0.15, 240)

            if event.ui_element == leftyslider:
                xoffset = random.uniform(-0.5, 3)
                yoffset = random.uniform(0, 2)
                ball_pos = pygame.Vector2((screen.get_width() / 2) + 90, (screen.get_height() / 3) + 70 )
                simulateadvancedlefty(True, ball_pos, -2 + xoffset, -0.3, 0.2 + yoffset, 0.4, 4, 520, 0.5, -0.65, 300)


            if event.ui_element == leftychangeup:
                xoffset = random.uniform(-4, 1)
                yoffset = random.uniform(-1, 2)
                ball_pos = pygame.Vector2((screen.get_width() / 2) + 90, (screen.get_height() / 3) + 70 )
                simulateadvancedlefty(True, ball_pos, -3 + xoffset, 0.15, 0.2 + yoffset, 0.5, 4, 460, 0.7, 0.3, 300)



            def simulateadvanced(yes, ball_pos, horizontalspeed,
                        horizontalacceleration, verticalspeed, verticalacceleration,
                        ballsize, traveltime, verticalbreak,
                        horizontalbreak, breaktime):

    soundplayed = 0
    starttime = pygame.time.get_ticks()
    while yes:
        current_time = pygame.time.get_ticks()
        if current_time < starttime + breaktime:

            time_delta = clock.tick(60)/1000.0
            screen.fill("black")

            pitcher(j,k)
            pygame.draw.circle(screen, "white", ball_pos, ballsize)
            ball_pos.y += verticalspeed
            ball_pos.x += horizontalspeed
            horizontalspeed += horizontalacceleration
            verticalspeed += verticalacceleration
            ballsize = ballsize * 1.030

            homeplate()
            batter(x,y)

            if strikezonedrawn == True:
                pygame.draw.rect(screen, "white", strikezone, 1)


            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

        elif current_time > starttime + breaktime and current_time < starttime + traveltime:

            time_delta = clock.tick(60)/1000.0
            screen.fill("black")


            pitcher(j,k)
            pygame.draw.circle(screen, "white", ball_pos, ballsize)
            ball_pos.y += verticalspeed
            ball_pos.x += horizontalspeed
            horizontalspeed += horizontalbreak
            verticalspeed += verticalbreak
            ballsize = ballsize * 1.030

            homeplate()
            batter(x,y)

            if strikezonedrawn == True:
                pygame.draw.rect(screen, "white", strikezone, 1)

            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

            if current_time > ((starttime + traveltime) - 125) and current_time < starttime + traveltime and soundplayed == 0:
                popsfx.play()
                soundplayed += 1

        elif current_time > starttime + traveltime:
            global pitchertype
            pitchertype = 1
            yes = False

    return 1






if current_time < starttime + 300:
            time_delta = clock.tick(60)/1000.0
            screen.fill("black")
            rightyone(c,d)
            draw_static()
            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

        if current_time > starttime + 300 and current_time < starttime + 500:
            time_delta = clock.tick(60)/1000.0
            screen.fill("black")

            rightytwo(c,d)
            draw_static()
            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

        if current_time > starttime + 500 and current_time < starttime + 800:
            time_delta = clock.tick(60)/1000.0
            screen.fill("black")

            rightythree(c,d)
            draw_static()
            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

        if current_time > starttime + 800 and current_time < starttime + 1000:
            time_delta = clock.tick(60)/1000.0
            screen.fill("black")

            rightyfour(c,d)
            draw_static()
            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

        if current_time > starttime + 1000 and current_time < starttime + 1100:
            time_delta = clock.tick(60)/1000.0
            screen.fill("black")

            rightyfive(c,d+20)
            draw_static()
            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()




    def swinging():
    swing_starttime = pygame.time.get_ticks()
    inswing = True
    while inswing:
        timenow = pygame.time.get_ticks()
        if timenow < swing_starttime + 1400:
            time_delta = clock.tick(60)/1000.0
            screen.fill("black")
            if timenow <= swing_starttime + 200:
                troutone(x,y)
            elif timenow > swing_starttime + 200 and timenow <= swing_starttime + 400:
                troutraiseleg(x,y)
            elif timenow > swing_starttime + 400 and timenow <= swing_starttime + 600:
                trouttwo(x,y)
            elif timenow > swing_starttime + 600 and timenow <= swing_starttime + 800:
                troutthree(x,y + 40) 
            elif timenow > swing_starttime + 800 and timenow <= swing_starttime + 850:
                troutfour(x,y + 90)      
            elif timenow > swing_starttime + 850 and timenow <= swing_starttime + 900:
                troutfive(x,y + 90)
            elif timenow > swing_starttime + 900 and timenow <= swing_starttime + 950:
                troutsix(x,y)
            elif timenow > swing_starttime + 950:
                troutseven(x,y - 20)    
            draw_static1()
            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()
        else:
            inswing = False

    return



    for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_w:
                        swing_starttime = pygame.time.get_ticks()
                        swing_started = 1

            if swing_started == 1:
                timenow = current_time
                swing_display(timenow, swing_starttime)
            elif swing_started == 0:
                troutone(x,y)


    if  not collision(ball_pos.x, ball_pos.y, 11, 630, 482.5, 130, 165):
                strikecall.play()
                pitchnumber += 1
                currentstrikes += 1
                #STRIKEOUT OCCURS
                if currentstrikes == 3:
                    string = "PITCH {} : STRIKE<br>COUNT IS {} - {}<br><b>STRIKEOUT</b>".format(pitchnumber, currentballs, currentstrikes)
                    textbox = pitchresult(string)
                    textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
                    currentstrikeouts += 1
                    currentouts +=1
                    result = "CURRENT OUTS : {}<br>STRIKEOUTS : {}<br>WALKS : {}<br>RUNS SCORED: {}".format(currentouts, currentstrikeouts, currentwalks, runs_scored)
                    scoreboard = drawscoreboard(result)
                    scoreboard.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
                    pitchnumber = 0
                    currentstrikes = 0
                    currentballs = 0
                else:
                    string = "PITCH {} : STRIKE<br>COUNT IS {} - {}<br>".format(pitchnumber, currentballs, currentstrikes)
                    textbox = pitchresult(string)
                    textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
            else:
                ballcall.play()
                currentballs += 1
                pitchnumber += 1
                #WALK OCCURS
                if currentballs == 4:
                    string = "PITCH {} : BALL<br>COUNT IS {} - {}<br><b>WALK</b>".format(pitchnumber, currentballs, currentstrikes)
                    textbox = pitchresult(string)
                    textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
                    currentwalks += 1
                    pitchnumber = 0
                    currentstrikes = 0
                    currentballs = 0
                    if runners == 3:
                        runs_scored += 1
                    else:
                        runners += 1
                    result = "CURRENT OUTS : {}<br>STRIKEOUTS : {}<br>WALKS : {}<br>RUNS SCORED: {}<br>RUNNERS : {}".format(currentouts, currentstrikeouts, currentwalks, runs_scored,runners)
                    scoreboard = drawscoreboard(result)
                    scoreboard.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
                    
                else:
                    string = "PITCH {} : BALL<br>COUNT IS {} - {}".format(pitchnumber, currentballs, currentstrikes)
                    textbox = pitchresult(string)
                    textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)






def swing_display(timenow, swing_starttime):
    if timenow < swing_starttime + 1400:
        if timenow <= swing_starttime + 200:
            troutone(x,y)
        elif timenow > swing_starttime + 200 and timenow <= swing_starttime + 400:
            troutraiseleg(x,y)
        elif timenow > swing_starttime + 400 and timenow <= swing_starttime + 600:
            trouttwo(x,y)
        elif timenow > swing_starttime + 600 and timenow <= swing_starttime + 800:
            troutthree(x,y + 40) 
        elif timenow > swing_starttime + 800 and timenow <= swing_starttime + 850:
            troutfour(x,y + 90)      
        elif timenow > swing_starttime + 850 and timenow <= swing_starttime + 900:
            troutfive(x,y + 90)
        elif timenow > swing_starttime + 900 and timenow <= swing_starttime + 950:
            troutsix(x,y)
        elif timenow > swing_starttime + 950:
            troutseven(x,y - 20)
    return





if current_time > starttime + 1100 and current_time < starttime + 1150:


            time_delta = clock.tick(60)/1000.0
            screen.fill("black")


            rightysix(c,d+20)
            pygame.draw.circle(screen, "white", ball_pos, ballsize)
            ball_pos.y += verticalspeed
            ball_pos.x += horizontalspeed
            horizontalspeed += horizontalacceleration
            verticalspeed += verticalacceleration
            ballsize = ballsize * 1.030

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_w and swing_started <= 1:
                        swing_starttime = pygame.time.get_ticks()
                        swing_started += 1
                        if abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) > 25 and abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) < 50:
                            ball_struck = 1
                            contact_time = swing_starttime + 150
                        elif abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) <= 25:
                            ball_struck = 2
                            contact_time = swing_starttime + 150

            if swing_started > 0:
                timenow = current_time
                swing_start(timenow, swing_starttime)
            elif swing_started == 0:
                leg_kick(current_time, starttime + 650)

            draw_static1()

            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

        if current_time > starttime + 1150 and current_time < starttime + breaktime + 1150 and ball_struck == 0:


            time_delta = clock.tick(60)/1000.0
            screen.fill("black")

            rightyseven(c,d+20)
            pygame.draw.circle(screen, "white", ball_pos, ballsize)
            ball_pos.y += verticalspeed
            ball_pos.x += horizontalspeed
            horizontalspeed += horizontalacceleration
            verticalspeed += verticalacceleration
            ballsize = ballsize * 1.030

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_w and swing_started <= 1:
                        swing_starttime = pygame.time.get_ticks()
                        swing_started += 1
                        if abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) > 25 and abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) < 50:
                            ball_struck += 1
                            contact_time = swing_starttime + 150
                        elif abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) <= 25:
                            ball_struck = 2
                            contact_time = swing_starttime + 150

            if swing_started > 0:
                timenow = current_time
                swing_start(timenow, swing_starttime)
            elif swing_started == 0:
                leg_kick(current_time, starttime + 650)

            draw_static1()


            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()



        elif (current_time > starttime + breaktime + 1150 and current_time < starttime + traveltime + 1150 and ball_struck == 0) or (ball_struck > 0 and current_time <= contact_time) :

            time_delta = clock.tick(60)/1000.0
            screen.fill("black")


            rightyseven(c,d+20)
            pygame.draw.circle(screen, "white", ball_pos, ballsize)
            ball_pos.y += verticalspeed
            ball_pos.x += horizontalspeed
            horizontalspeed += horizontalbreak
            verticalspeed += verticalbreak
            ballsize = ballsize * 1.030

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_w and swing_started <= 1:
                        swing_starttime = pygame.time.get_ticks()
                        swing_started += 1
                        if abs((swing_starttime + 150) - (starttime + traveltime + 1150) ) > 25 and abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) < 75:
                            ball_struck += 1
                            contact_time = swing_starttime + 150
                        elif abs((swing_starttime + 150) - (starttime + traveltime + 1150) ) <= 25:
                            ball_struck = 2
                            contact_time = swing_starttime + 150
                    

            if swing_started > 0:
                timenow = current_time
                swing_start(timenow, swing_starttime)
            elif swing_started == 0:
                leg_kick(current_time, starttime + 650)

            draw_static1()

            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

            if current_time > ((starttime + traveltime + 1150) - 100) and current_time < starttime + traveltime + 1150 and soundplayed == 0 and ball_struck == 0:
                popsfx.play()
                soundplayed += 1


















def simulateadvancedrighty(yes, ball_pos, horizontalspeed,
                        horizontalacceleration, verticalspeed, verticalacceleration,
                        ballsize, traveltime, verticalbreak,
                        horizontalbreak, breaktime):

    global currentballs
    global pitchnumber
    global currentstrikes
    global string
    global currentouts
    global currentstrikeouts
    global currentwalks
    global runners
    global runs_scored
    global swing_started
    swing_started = 0


    salepitch.hide()
    strikezonetoggle.hide()
    degrompitch.hide()

    
    soundplayed = 0
    ball_struck = 0
    contact_time = 0
    pitch_results_done = False


    ball_final_location = pitch_ending_location(breaktime, traveltime, verticalspeed, horizontalspeed,
                                                verticalacceleration, horizontalacceleration,
                                                verticalbreak, horizontalbreak )




    starttime = pygame.time.get_ticks()
    while yes:
        current_time = pygame.time.get_ticks()
        if current_time <= starttime + 1100:
            time_delta = clock.tick(60)/1000.0
            screen.fill("black")
            if current_time <= starttime + 300:
                rightyone(c,d)
            elif current_time > starttime + 300 and current_time <= starttime + 500:
                rightytwo(c,d)
            elif current_time > starttime + 500 and current_time <= starttime + 800:
                rightythree(c,d) 
            elif current_time > starttime + 800 and current_time <= starttime + 1000:
                rightyfour(c,d)      
            elif current_time > starttime + 1000 and current_time <= starttime + 1100:
                rightyfive(c,d+20)

            leg_kick(current_time, starttime + 650)
                                        
            draw_static1()
            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

        if current_time > starttime + 1100 and current_time < starttime + 1150:


            time_delta = clock.tick(60)/1000.0
            screen.fill("black")


            rightysix(c,d+20)
            pygame.draw.circle(screen, "white", ball_pos, ballsize)
            ball_pos.y += verticalspeed
            ball_pos.x += horizontalspeed
            horizontalspeed += horizontalacceleration
            verticalspeed += verticalacceleration
            ballsize = ballsize * 1.030

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_w and swing_started <= 1:
                        swing_starttime = pygame.time.get_ticks()
                        swing_started += 1
                        if abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) > 25 and abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) < 50:
                            ball_struck = 1
                            contact_time = swing_starttime + 150
                        elif abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) <= 25:
                            ball_struck = 2
                            contact_time = swing_starttime + 150

            if swing_started > 0:
                timenow = current_time
                swing_start(timenow, swing_starttime)
            elif swing_started == 0:
                leg_kick(current_time, starttime + 650)

            draw_static1()

            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

        if current_time > starttime + 1150 and current_time < starttime + breaktime + 1150 and ball_struck == 0:


            time_delta = clock.tick(60)/1000.0
            screen.fill("black")

            rightyseven(c,d+20)
            pygame.draw.circle(screen, "white", ball_pos, ballsize)
            ball_pos.y += verticalspeed
            ball_pos.x += horizontalspeed
            horizontalspeed += horizontalacceleration
            verticalspeed += verticalacceleration
            ballsize = ballsize * 1.030

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_w and swing_started <= 1:
                        swing_starttime = pygame.time.get_ticks()
                        swing_started += 1
                        if abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) > 25 and abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) < 50:
                            ball_struck += 1
                            contact_time = swing_starttime + 150
                        elif abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) <= 25:
                            ball_struck = 2
                            contact_time = swing_starttime + 150

            if swing_started > 0:
                timenow = current_time
                swing_start(timenow, swing_starttime)
            elif swing_started == 0:
                leg_kick(current_time, starttime + 650)

            draw_static1()


            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()



        elif (current_time > starttime + breaktime + 1150 and current_time < starttime + traveltime + 1150 and ball_struck == 0) or (ball_struck > 0 and current_time <= contact_time) :

            time_delta = clock.tick(60)/1000.0
            screen.fill("black")


            rightyseven(c,d+20)
            pygame.draw.circle(screen, "white", ball_pos, ballsize)
            ball_pos.y += verticalspeed
            ball_pos.x += horizontalspeed
            horizontalspeed += horizontalbreak
            verticalspeed += verticalbreak
            ballsize = ballsize * 1.030

            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_w and swing_started <= 1:
                        swing_starttime = pygame.time.get_ticks()
                        swing_started += 1
                        if abs((swing_starttime + 150) - (starttime + traveltime + 1150) ) > 25 and abs( (swing_starttime + 150) - (starttime + traveltime + 1150) ) < 75:
                            ball_struck += 1
                            contact_time = swing_starttime + 150
                        elif abs((swing_starttime + 150) - (starttime + traveltime + 1150) ) <= 25:
                            ball_struck = 2
                            contact_time = swing_starttime + 150
                    

            if swing_started > 0:
                timenow = current_time
                swing_start(timenow, swing_starttime)
            elif swing_started == 0:
                leg_kick(current_time, starttime + 650)

            draw_static1()

            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

            if current_time > ((starttime + traveltime + 1150) - 100) and current_time < starttime + traveltime + 1150 and soundplayed == 0 and ball_struck == 0:
                popsfx.play()
                soundplayed += 1



        elif ball_struck == 1 and current_time > contact_time and current_time <= starttime + traveltime + 1800 and pitch_results_done == False:
            pitch_results_done = True
            pitchnumber += 1
            if currentstrikes == 2:
                string = "PITCH {} : FOUL BALL<br>COUNT IS {} - {}<br>".format(pitchnumber, currentballs, currentstrikes)
                textbox = pitchresult(string)
                textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
            else:
                currentstrikes += 1
                string = "PITCH {} : FOUL BALL<br>COUNT IS {} - {}<br>".format(pitchnumber, currentballs, currentstrikes)
                textbox = pitchresult(string)
                textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)

        elif ball_struck == 2 and current_time > contact_time and current_time <= starttime + traveltime + 1800 and pitch_results_done == False:
            pitch_results_done = True
            pitchnumber += 1
            if runners == 3:
                runs_scored += 1
            else:
                runners += 1
            string = "PITCH {} : HIT - SINGLE<br>".format(pitchnumber)
            textbox = pitchresult(string)
            textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
            result = "CURRENT OUTS : {}<br>STRIKEOUTS : {}<br>WALKS : {}<br>RUNS SCORED: {}<br>RUNNERS : {}".format(currentouts, currentstrikeouts, currentwalks, runs_scored,runners)
            scoreboard = drawscoreboard(result)
            scoreboard.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
            pitchnumber = 0
            currentstrikes = 0
            currentballs = 0
        



        elif ball_struck > 0 and current_time > contact_time and current_time <= starttime + traveltime + 1800 and pitch_results_done == True:
            time_delta = clock.tick(60)/1000.0
            screen.fill("black")
            if swing_started > 0:
                timenow = current_time
                swing_start(timenow, swing_starttime)
            elif swing_started == 0:
                leg_kick(current_time, starttime + 650)
            pygame.draw.circle(screen, "white", ball_pos, fourseamballsize, 2)
            draw_static1()
            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()
            if soundplayed == 0 and ball_struck == 1:
                foulball.play()
                soundplayed += 1
            elif soundplayed == 0 and ball_struck == 2:
                hit.play()
                soundplayed += 1
            

            
        elif current_time > starttime + traveltime + 1150 and pitch_results_done == False and ball_struck == 0:
            pitch_results_done = True
            if  (not collision(ball_pos.x, ball_pos.y, 11, 630, 482.5, 130, 165)) and swing_started == 0:
                ballcall.play()
                currentballs += 1
                pitchnumber += 1
                #WALK OCCURS
                if currentballs == 4:
                    string = "PITCH {} : BALL<br>COUNT IS {} - {}<br><b>WALK</b>".format(pitchnumber, currentballs, currentstrikes)
                    textbox = pitchresult(string)
                    textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
                    currentwalks += 1
                    pitchnumber = 0
                    currentstrikes = 0
                    currentballs = 0
                    if runners == 3:
                        runs_scored += 1
                    else:
                        runners += 1
                    result = "CURRENT OUTS : {}<br>STRIKEOUTS : {}<br>WALKS : {}<br>RUNS SCORED: {}<br>RUNNERS : {}".format(currentouts, currentstrikeouts, currentwalks, runs_scored,runners)
                    scoreboard = drawscoreboard(result)
                    scoreboard.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
                    
                else:
                    string = "PITCH {} : BALL<br>COUNT IS {} - {}".format(pitchnumber, currentballs, currentstrikes)
                    textbox = pitchresult(string)
                    textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)                
            else:
                if swing_started == 0:
                    strikecall.play()
                pitchnumber += 1
                currentstrikes += 1
                #STRIKEOUT OCCURS
                if currentstrikes == 3:
                    string = "PITCH {} : STRIKE<br>COUNT IS {} - {}<br><b>STRIKEOUT</b>".format(pitchnumber, currentballs, currentstrikes)
                    textbox = pitchresult(string)
                    textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
                    currentstrikeouts += 1
                    currentouts +=1
                    result = "CURRENT OUTS : {}<br>STRIKEOUTS : {}<br>WALKS : {}<br>RUNS SCORED: {}".format(currentouts, currentstrikeouts, currentwalks, runs_scored)
                    scoreboard = drawscoreboard(result)
                    scoreboard.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
                    pitchnumber = 0
                    currentstrikes = 0
                    currentballs = 0
                else:
                    string = "PITCH {} : STRIKE<br>COUNT IS {} - {}<br>".format(pitchnumber, currentballs, currentstrikes)
                    textbox = pitchresult(string)
                    textbox.set_active_effect(pygame_gui.TEXT_EFFECT_TYPING_APPEAR)
        

        elif current_time > starttime + traveltime + 1150 and pitch_results_done == True and current_time <= starttime + traveltime + 1800 and ball_struck == 0:
            time_delta = clock.tick(60)/1000.0
            screen.fill("black")
            if swing_started > 0:
                timenow = current_time
                swing_start(timenow, swing_starttime)
            elif swing_started == 0:
                leg_kick(current_time, starttime + 650)
            pygame.draw.circle(screen, "white", ball_pos, fourseamballsize, 2)
            draw_static1()
            manager.update(time_delta)
            manager.draw_ui(screen)
            pygame.display.flip()

        elif current_time > starttime + traveltime + 1800:
            yes = False
            salepitch.show()
            strikezonetoggle.show()
            degrompitch.show()
            
    
    return








if (ball_pos.x < 554 or ball_pos.x > 576) or (ball_pos.y < 510 or ball_pos.y > 576):
                made_contact = 10
            else:
                made_contact = 1